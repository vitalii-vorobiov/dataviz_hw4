{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","religionButton","margin","spacing","App","classes","React","useState","data","setData","mapData","setMapData","chartData","setChartData","religion","setReligion","country","setCountry","useEffect","path","mounted","fetch","headers","then","response","json","myJson","map","row","trim","getInt","res","filter","value","replaceAll","includes","parseInt","unpack","rows","key","className","index","Button","variant","onClick","type","locationmode","locations","colorbar","title","thickness","autocolorscale","z","text","layout","width","window","innerWidth","height","geo","projection","hover","x","item","y","Typography","gutterBottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecf70db6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport {useEffect} from \"react\";\nimport {makeStyles, Typography} from \"@material-ui/core\";\nimport Plot from 'react-plotly.js';\n\nconst useStyles = makeStyles((theme) => ({\n    religionButton: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const religions = [\"Christians\", \"Muslims\", \"Unaffiliated\", \"Hindus\", \"Buddhists\", \"Jews\", \"Folk Religions\", \"Other Religions\"]\n\n    const [data, setData] = React.useState([]);\n    const [mapData, setMapData] = React.useState([]);\n    const [chartData, setChartData] = React.useState([]);\n    const [religion, setReligion] = React.useState(\"Christians\")\n    const [country, setCountry] = React.useState(\"Ukraine\")\n\n    useEffect(() => {\n        const getData = path => {\n            return fetch(path\n                ,{\n                    headers : {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }\n            )\n                .then(response =>{\n                    return response.json()\n                })\n                .then(myJson => {\n                    return myJson.map(row => ({\n                            \"Year\": row[\"Year\"].trim(),\n                            \"Country\": row[\"Country\"].trim(),\n                            \"Christians\": getInt(row[\"Christians\"].trim()),\n                            \"Muslims\": getInt(row[\"Muslims\"].trim()),\n                            \"Unaffiliated\": getInt(row[\"Unaffiliated\"].trim()),\n                            \"Hindus\": getInt(row[\"Hindus\"].trim()),\n                            \"Buddhists\": getInt(row[\"Buddhists\"].trim()),\n                            \"Jews\": getInt(row[\"Jews\"].trim()),\n                            \"Folk Religions\": getInt(row[\"Folk Religions\"].trim()),\n                            \"Other Religions\": getInt(row[\"Other Religions\"].trim()),\n                    }))\n                });\n        }\n\n        let mounted = true;\n        getData(\"Religious_Composition_by_Country_2010-2050.json\").then(res => {\n            if(mounted) {\n                setData(res)\n                setMapData(res.filter(row => row[\"Year\"] === \"2010\" && row[\"Country\"] !== \"All Countries\"))\n                setChartData(res.filter(row => row[\"Country\"] === country).map(row => ({\n                    \"Year\": row[\"Year\"],\n                    \"Value\": row[religion]\n                })))\n            }\n        })\n        return () => mounted = false;\n    }, [])\n\n    const getInt = value => {\n        return value.replaceAll(\",\", \"\").includes(\"<\") ? 0 : parseInt(value.trim().replaceAll(\",\", \"\"))\n    }\n\n    const unpack = (rows, key) => {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Buttons\">\n                {religions.map((religion, index) =>\n                    <Button className={classes.religionButton} variant=\"contained\" key={index} onClick={() => {\n                        setReligion(religion)\n                        setChartData(data.filter(row => row[\"Country\"] === country).map(row => ({\n                            \"Year\": row[\"Year\"],\n                            \"Value\": row[religion]\n                        })))\n                    }}>{religion}</Button>\n                )}\n            </div>\n            <div className=\"Map\">\n                <Plot\n                    data={[{\n                        type: 'choropleth',\n                        locationmode: 'country names',\n                        locations: unpack(mapData, 'Country'),\n                        colorbar: {\n                            title: `Amount of ${religion}`,\n                            thickness: 30\n                        },\n                        autocolorscale: true,\n                        z: unpack(mapData, religion),\n                        text: unpack(mapData, 'Country'),\n                    }]}\n                    layout={{\n                        title: `Number of ${religion} in 2010`,\n                        width: window.innerWidth * 0.6,\n                        height: 800,\n                        geo: {\n                            projection: {\n                                type: 'natural earth'\n                            }\n                        }\n                    }}\n                    onClick={hover => {\n                        setCountry(hover['points'][0]['location'])\n                        setChartData(data.filter(row => row[\"Country\"] === hover['points'][0]['location']).map(row => ({\n                            \"Year\": row[\"Year\"],\n                            \"Value\": row[religion]\n                        })))\n                    }}\n                />\n                <Plot\n                    data={[{\n                        x: chartData.map(item => item[\"Year\"]),\n                        y: chartData.map(item => item[\"Value\"]),\n                        type: 'scatter'\n                    }]}\n                    layout={{\n                        title: `${religion} in ${country} from 2010 to 2050`,\n                        width: window.innerWidth * 0.3,\n                    }}\n                />\n            </div>\n            <Typography variant=\"body1\" gutterBottom>\n                Click on Country of interest to get detailed info\n            </Typography>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}