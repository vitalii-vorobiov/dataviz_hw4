{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","religionButton","margin","spacing","App","classes","React","useState","data","setData","mapData","setMapData","chartData","setChartData","religion","setReligion","country","setCountry","useEffect","path","mounted","fetch","headers","then","response","console","log","json","myJson","map","row","trim","getInt","res","filter","value","replaceAll","includes","parseInt","unpack","rows","key","className","index","Button","variant","onClick","type","locationmode","locations","z","text","autocolorscale","layout","title","width","height","geo","projection","onHover","hover","x","item","y","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19b5e35d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport {useEffect} from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Plot from 'react-plotly.js';\n\nconst useStyles = makeStyles((theme) => ({\n    religionButton: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const religions = [\"Christians\", \"Muslims\", \"Unaffiliated\", \"Hindus\", \"Buddhists\", \"Folk Religions\", \"Other Religions\", \"Jews\", \"All Religions\"]\n\n    const [data, setData] = React.useState([]);\n    const [mapData, setMapData] = React.useState([]);\n    const [chartData, setChartData] = React.useState([]);\n    const [religion, setReligion] = React.useState(\"Christians\")\n    const [country, setCountry] = React.useState(\"\")\n\n    useEffect(() => {\n        const getData = path => {\n            return fetch(path\n                ,{\n                    headers : {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }\n            )\n                .then(response =>{\n                    console.log(response)\n                    return response.json()\n                })\n                .then(myJson => {\n                    return myJson.map(row => ({\n                            \"Year\": row[\"Year\"].trim(),\n                            \"Country\": row[\"Country\"].trim(),\n                            \"Christians\": getInt(row[\"Christians\"].trim()),\n                            \"Muslims\": getInt(row[\"Muslims\"].trim()),\n                            \"Unaffiliated\": getInt(row[\"Unaffiliated\"].trim()),\n                            \"Hindus\": getInt(row[\"Hindus\"].trim()),\n                            \"Buddhists\": getInt(row[\"Buddhists\"].trim()),\n                            \"Folk Religions\": getInt(row[\"Folk Religions\"].trim()),\n                            \"Other Religions\": getInt(row[\"Other Religions\"].trim()),\n                            \"Jews\": getInt(row[\"Jews\"].trim()),\n                            \"All Religions\": getInt(row[\"All Religions\"].trim()),\n                    }))\n                });\n        }\n\n        let mounted = true;\n        getData(\"Religious_Composition_by_Country_2010-2050.json\").then(res => {\n            if(mounted) {\n                setData(res)\n                setMapData(res.filter(row => row[\"Year\"] === \"2010\"))\n            }\n        })\n        return () => mounted = false;\n    }, [])\n\n    const getInt = value => {\n        return value.replaceAll(\",\", \"\").includes(\"<\") ? 0 : parseInt(value.trim().replaceAll(\",\", \"\"))\n    }\n\n    const unpack = (rows, key) => {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Buttons\">\n                {religions.map((religion, index) =>\n                    <Button className={classes.religionButton} variant=\"contained\" key={index} onClick={() => setReligion(religion)}>{religion}</Button>\n                )}\n            </div>\n            <div className=\"Map\">\n                <Plot\n                    data={[{\n                        type: 'choropleth',\n                        locationmode: 'country names',\n                        locations: unpack(mapData, 'Country'),\n                        z: unpack(mapData, religion),\n                        text: unpack(mapData, 'Country'),\n                        autocolorscale: true\n                    }]}\n                    layout={{\n                        title: `Number of ${religion} in 2010`,\n                        width: 800,\n                        height: 800,\n                        geo: {\n                            projection: {\n                                type: 'natural earth'\n                            }\n                        }\n                    }}\n                    onHover={hover => {\n                        setCountry(hover['points'][0]['location'])\n                        setChartData(data.filter(row => row[\"Country\"] === hover['points'][0]['location']).map(row => ({\n                            \"Year\": row[\"Year\"],\n                            \"Value\": row[religion]\n                        })))\n                        console.log(chartData)\n                    }}\n                />\n                <Plot\n                    data={[{\n                        x: chartData.map(item => item[\"Year\"]),\n                        y: chartData.map(item => item[\"Value\"]),\n                        type: 'scatter'\n                    }]}\n                    layout={{\n                        title: `${religion} in ${country} from 2010 to 2050`,\n                    }}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}